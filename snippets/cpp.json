{
    "template": {
        "prefix": "cpp",
        "body": [
            "#include \"bits/stdc++.h\"",
            "",
            "#pragma GCC optimize(\"Ofast\")",
            "// Make __builtin_popcount faster: https://codeforces.com/blog/entry/13134?#comment-736517",
            "#pragma GCC target(\"popcnt\")",
            "#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")",
            "",
            "#ifdef phanlong2811",
            "    #include \"debug.h\"",
            "#endif",
            "",
            "using namespace std;",
            "",
            "#define FOR(i, l, r) for(int i = l; i <= r; ++i)",
            "#define FOD(i, r, l) for(int i = r; i >= l; --i)",
            "#define fi first",
            "#define se second",
            "#define bit(x, k) (1ll&((x) >> (k)))",
            "#define on(x, k) ((x)|(1ll << (k)))",
            "#define off(x, k) ((x)&~(1ll << (k)))",
            "#define sz(a) ((int)a.size())",
            "",
            "mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());",
            "",
            "int32_t main() {",
                "    ios_base::sync_with_stdio(0);",
                "    cin.tie(0);",
                "",
                "    return 0;",
                "}",
                ""
        ],
        "description": "template"
    },
    "generator": {
        "prefix": "gen",
        "body": [
            "#include \"bits/stdc++.h\"",
            "using namespace std;",
            "using pii=pair<int, int>;",
            "",
            "#define FOR(i, l, r) for(int i = l; i <= r; ++i)",
            "#define FOD(i, r, l) for(int i = r; i >= l; --i)",
            "#define fi first",
            "#define se second",
            "#define bit(x, k) (1ll&((x) >> (k)))",
            "#define debug(x) cerr << #x << \" = \" << x << '\\n';",
            "",
            "mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());",
            "",
            "int rand(int l, int r) {",
                "    return l + rng()%(r - l + 1);",
                "}",
                "void createArray(int lSize, int rSize, int lVal, int rVal) {",
                    "    int n;",
                    "    n = rand(lSize, rSize);",
                    "    cout << n << '\\n';",
                    "    FOR(i, 1, n) cout << rand(lVal, rVal) << \" \\n\"[i == n];",
                    "}",
                    "void createTree(int l, int r) {",
                        "    vector<int> par, permutation;",
                        "    vector<pii> edges;",
                        "    int n;",
                        "    n = rand(l, r);",
                        "    par = permutation = vector<int>(n);",
                        "",
                        "    FOR(i, 0, n - 1) permutation[i] = i;",
                        "    shuffle(permutation.begin(), permutation.end(), rng);",
                        "    FOR(i, 1, n - 1) {",
                            "        par[i] = rand(0, i - 1);",
                            "        edges.push_back({permutation[i], permutation[par[i]]});",
                            "    }",
                            "    shuffle(edges.begin(), edges.end(), rng);",
                            "    cout << n << '\\n';",
                            "    for(auto [u, v]:edges) cout << u + 1 << \" \" << v + 1 << '\\n';",
                            "}",
                            "int32_t main() {",
                                "    ios_base::sync_with_stdio(0);",
                                "    cin.tie(0);",
                                "    return 0;",
                                "}",
                                ""
        ],
        "description": "generator"
    },
    "debug": {
        "prefix": "debug",
        "body": [
            "void __print(int x) {cerr << x;}",
            "void __print(long x) {cerr << x;}",
            "void __print(long long x) {cerr << x;}",
            "void __print(unsigned x) {cerr << x;}",
            "void __print(unsigned long x) {cerr << x;}",
            "void __print(unsigned long long x) {cerr << x;}",
            "void __print(float x) {cerr << x;}",
            "void __print(double x) {cerr << x;}",
            "void __print(long double x) {cerr << x;}",
            "void __print(char x) {cerr << '\\'' << x << '\\'';}",
            "void __print(const char *x) {cerr << '\\\"' << x << '\\\"';}",
            "void __print(const string &x) {cerr << '\\\"' << x << '\\\"';}",
            "void __print(bool x) {cerr << (x ? \"true\" : \"false\");}",
            "",
            "template<typename T, typename V>",
            "void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}",
            "template<typename T>",
            "void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \", \" : \"\"), __print(i); cerr << \"}\";}",
            "void _print() {cerr << \"]\\n\";}",
            "template <typename T, typename... V>",
            "void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}",
            "#define debug(x...) {cerr << \"[\" << #x << \"] = [\"; _print(x);}",
                "#define PR(A, n) {cerr << #A << \" = \"; FOR(i, 1, n) cerr << A[i] << \" \\n\"[i == n];}",
                ""
            ],
            "description": "debug"
    },
    "divide for mod": {
        "prefix": "intmod",
        "body": [
            "struct intMod {",
                "    const int mod = 998244353; // <-- change this",
                "    int val;",
                "    intMod(int val = 0): val(val) {};",
                "    bool operator == (const intMod &a) const {",
                    "        return a.val == val;",
                    "    }",
                    "    bool operator != (const intMod &a) const {",
                        "        return a.val != val;",
                        "    }",
                        "    void operator = (const int &a) {",
                            "        val = a;",
                            "    }",
                            "    void operator = (const intMod &a) {",
                                "        val = a.val;",
                                "    }",
                                "    intMod operator + (const intMod &other) {",
                                    "        int ans = val + other.val;",
                                    "        if(ans >= mod) ans -= mod;",
                                    "        return ans;",
                                    "    }",
                                    "    intMod operator - (const intMod &other) {",
                                        "        int ans = val - other.val;",
                                        "        if(ans < 0) ans += mod;",
                                        "        return ans;",
                                        "    }",
                                        "    intMod operator * (const intMod &other) {",
                                            "        return (long long)val * other.val % mod;",
                                            "    }",
                                            "    intMod powMod(int x) const {",
                                                "        intMod ans(1), cc(val);",
                                                "        for(; x > 0; x >>= 1, cc = cc * cc) {",
                                                    "            if (x & 1) ans = ans * cc;",
                                                    "        }",
                                                    "        return ans;",
                                                    "    }",
                                                    "    intMod operator / (const intMod &other) {",
                                                        "        return intMod(val) * other.powMod(mod - 2);",
                                                        "    }",
                                                        "    void operator += (const intMod &other) {",
                                                            "        (*this) = (*this) + other.val;",
                                                            "    }",
                                                            "    void operator -= (const intMod &other) {",
                                                                "        (*this) = (*this) - other.val;",
                                                                "    }",
                                                                "    void operator ++ () {",
                                                                    "        (*this) += 1;",
                                                                    "    }",
                                                                    "    void operator -- () {",
                                                                        "        (*this) -= 1;",
                                                                        "    }",
                                                                        "};",
                                                                        ""
        ],
        "description": "divide for mod"
    }
}
