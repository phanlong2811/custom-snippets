{
    "template": {
        "prefix": "cpp",
        "body": [
            "#include <bits/stdc++.h>",
            "",
            "#ifdef phanlong2811",
            "    #include <cp/debug.h>",
            "",
            "using namespace std;",
            "",
            "int32_t main() {",
                "    ios_base::sync_with_stdio(0);",
                "    cin.tie(0);",
                "    $1",
                "    return 0;",
                "}",
                ""
        ],
        "description": "template"
    },
    "generator": {
        "prefix": "gen",
        "body": [
            "#include \"bits/stdc++.h\"",
            "using namespace std;",
            "using pii=pair<int, int>;",
            "",
            "#define FOR(i, l, r) for(int i = l; i <= r; ++i)",
            "#define FOD(i, r, l) for(int i = r; i >= l; --i)",
            "#define fi first",
            "#define se second",
            "#define bit(x, k) (1ll&((x) >> (k)))",
            "#define debug(x) cerr << #x << \" = \" << x << '\\n';",
            "",
            "mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());",
            "",
            "int rand(int l, int r) {",
                "    return l + rng()%(r - l + 1);",
                "}",
                "void createArray(int lSize, int rSize, int lVal, int rVal) {",
                    "    int n;",
                    "    n = rand(lSize, rSize);",
                    "    cout << n << '\\n';",
                    "    FOR(i, 1, n) cout << rand(lVal, rVal) << \" \\n\"[i == n];",
                    "}",
                    "void createTree(int l, int r) {",
                        "    vector<int> par, permutation;",
                        "    vector<pii> edges;",
                        "    int n;",
                        "    n = rand(l, r);",
                        "    par = permutation = vector<int>(n);",
                        "",
                        "    FOR(i, 0, n - 1) permutation[i] = i;",
                        "    shuffle(permutation.begin(), permutation.end(), rng);",
                        "    FOR(i, 1, n - 1) {",
                            "        par[i] = rand(0, i - 1);",
                            "        edges.push_back({permutation[i], permutation[par[i]]});",
                            "    }",
                            "    shuffle(edges.begin(), edges.end(), rng);",
                            "    cout << n << '\\n';",
                            "    for(auto [u, v]:edges) cout << u + 1 << \" \" << v + 1 << '\\n';",
                            "}",
                            "int32_t main() {",
                                "    ios_base::sync_with_stdio(0);",
                                "    cin.tie(0);",
                                "    return 0;",
                                "}",
                                ""
        ],
        "description": "generator"
    }
}
